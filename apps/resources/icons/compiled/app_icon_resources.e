note
	description: "Icon loader class generated by icon_code_gen"
	keywords:    "Embedded icons"
	author:      "Thomas Beale <thomas.beale@oceaninformatics.com>"
	support:     "http://www.openehr.org/issues/browse/AWB"
	copyright:   "Copyright (c) 2013- Ocean Informatics Pty Ltd"
	license:     "Apache 2.0 License <http://www.apache.org/licenses/LICENSE-2.0.html>"

class APP_ICON_RESOURCES

inherit
	APPLICATION_ICON_RESOURCES


feature -- Access

	icon_load_agents: HASH_TABLE [FUNCTION [ANY, TUPLE, EV_PIXMAP], STRING]
			-- create pixmap table from pixmap classes
		once
			create Result.make (0)
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ARCHETYPE_SLOT_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/archetype_slot.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ARCHETYPE_SLOT_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/archetype_slot.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ARCHETYPE_SLOT_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/archetype_slot.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ARCHETYPE_SLOT_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/archetype_slot.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ARCHETYPE_SLOT_EXCLUDE}.make).to_pixmap end, "am/added/archetype_slot_exclude")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ARCHETYPE_SLOT_INCLUDE}.make).to_pixmap end, "am/added/archetype_slot_include")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_ASSERTION}.make).to_pixmap end, "am/added/assertion")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ARCHETYPE_RLOT_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/c_archetype_rlot.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ARCHETYPE_ROOT_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/c_archetype_root.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ARCHETYPE_ROOT_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/c_archetype_root.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ARCHETYPE_ROOT_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/c_archetype_root.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/c_attribute.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/c_attribute.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/c_attribute.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/c_attribute.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_COMPUTED_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/c_attribute_computed.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_COMPUTED_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/c_attribute_computed.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_COMPUTED_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/c_attribute_computed.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_ATTRIBUTE_COMPUTED_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/c_attribute_computed.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_CODE_PHRASE}.make).to_pixmap end, "am/added/c_code_phrase")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/c_complex_object.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/c_complex_object.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/c_complex_object.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/c_complex_object.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_PROXY_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/c_complex_object_proxy.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_PROXY_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/c_complex_object_proxy.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_PROXY_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/c_complex_object_proxy.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_COMPLEX_OBJECT_PROXY_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/c_complex_object_proxy.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_PRIMITIVE_OBJECT_MULTIPLE_MANDATORY}.make).to_pixmap end, "am/added/c_primitive_object.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_PRIMITIVE_OBJECT_MULTIPLE_OPTIONAL}.make).to_pixmap end, "am/added/c_primitive_object.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_PRIMITIVE_OBJECT_SINGLE_MANDATORY}.make).to_pixmap end, "am/added/c_primitive_object.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_C_PRIMITIVE_OBJECT_SINGLE_OPTIONAL}.make).to_pixmap end, "am/added/c_primitive_object.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_RULES}.make).to_pixmap end, "am/added/rules")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ADDED_TERM}.make).to_pixmap end, "am/added/term")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_ANY}.make).to_pixmap end, "am/assertion/operands/any")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_BOOLEAN}.make).to_pixmap end, "am/assertion/operands/boolean")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_CHARACTER}.make).to_pixmap end, "am/assertion/operands/character")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_CODE_PHRASE}.make).to_pixmap end, "am/assertion/operands/code_phrase")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_CONSTRAINT}.make).to_pixmap end, "am/assertion/operands/constraint")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_DOUBLE}.make).to_pixmap end, "am/assertion/operands/double")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_INTEGER}.make).to_pixmap end, "am/assertion/operands/integer")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_ORDINAL}.make).to_pixmap end, "am/assertion/operands/ordinal")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_REAL}.make).to_pixmap end, "am/assertion/operands/real")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERANDS_STRING}.make).to_pixmap end, "am/assertion/operands/string")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_AND}.make).to_pixmap end, "am/assertion/operators/and")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_ASSERTION}.make).to_pixmap end, "am/assertion/operators/assertion")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_DIVIDE}.make).to_pixmap end, "am/assertion/operators/divide")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_EQ}.make).to_pixmap end, "am/assertion/operators/eq")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_EXISTS}.make).to_pixmap end, "am/assertion/operators/exists")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_EXPONENT}.make).to_pixmap end, "am/assertion/operators/exponent")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_FOR_ALL}.make).to_pixmap end, "am/assertion/operators/for_all")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_GE}.make).to_pixmap end, "am/assertion/operators/ge")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_GT}.make).to_pixmap end, "am/assertion/operators/gt")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_IMPLIES}.make).to_pixmap end, "am/assertion/operators/implies")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_LE}.make).to_pixmap end, "am/assertion/operators/le")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_LT}.make).to_pixmap end, "am/assertion/operators/lt")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_MATCHES}.make).to_pixmap end, "am/assertion/operators/matches")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_MINUS}.make).to_pixmap end, "am/assertion/operators/minus")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_MULTIPLY}.make).to_pixmap end, "am/assertion/operators/multiply")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_NE}.make).to_pixmap end, "am/assertion/operators/ne")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_NOT}.make).to_pixmap end, "am/assertion/operators/not")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_NOT_MATCHES}.make).to_pixmap end, "am/assertion/operators/not_matches")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_OR}.make).to_pixmap end, "am/assertion/operators/or")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_PLUS}.make).to_pixmap end, "am/assertion/operators/plus")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_THERE_EXISTS}.make).to_pixmap end, "am/assertion/operators/there_exists")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_AM_ASSERTION_OPERATORS_XOR}.make).to_pixmap end, "am/assertion/operators/xor")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE}.make).to_pixmap end, "archetype/archetype")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_ADHOC}.make).to_pixmap end, "archetype/archetype_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_CATEGORY}.make).to_pixmap end, "archetype/archetype_category")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_PARSED}.make).to_pixmap end, "archetype/archetype_parsed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_PARSED_ADHOC}.make).to_pixmap end, "archetype/archetype_parsed_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_PARSE_FAILED}.make).to_pixmap end, "archetype/archetype_parse_failed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_PARSE_FAILED_ADHOC}.make).to_pixmap end, "archetype/archetype_parse_failed_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_REFERENCE}.make).to_pixmap end, "archetype/archetype_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_VALID}.make).to_pixmap end, "archetype/archetype_valid")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_VALID_ADHOC}.make).to_pixmap end, "archetype/archetype_valid_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_WARNING}.make).to_pixmap end, "archetype/archetype_warning")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_ARCHETYPE_WARNING_ADHOC}.make).to_pixmap end, "archetype/archetype_warning_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_C_ATTRIBUTE}.make).to_pixmap end, "archetype/c_attribute")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_C_ATTRIBUTE_MULTIPLE}.make).to_pixmap end, "archetype/c_attribute.multiple")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_C_ATTRIBUTE_MULTIPLE_OPTIONAL}.make).to_pixmap end, "archetype/c_attribute.multiple.optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_C_ATTRIBUTE_OPTIONAL}.make).to_pixmap end, "archetype/c_attribute.optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_FILE_FOLDER}.make).to_pixmap end, "archetype/file_folder")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_MODEL}.make).to_pixmap end, "archetype/model")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_MODEL_GROUP}.make).to_pixmap end, "archetype/model_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_SLOT_FILLERS}.make).to_pixmap end, "archetype/slot_fillers")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE}.make).to_pixmap end, "archetype/template")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_ADHOC}.make).to_pixmap end, "archetype/template_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_CATEGORY}.make).to_pixmap end, "archetype/template_category")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY}.make).to_pixmap end, "archetype/template_overlay")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_ADHOC}.make).to_pixmap end, "archetype/template_overlay_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_PARSED}.make).to_pixmap end, "archetype/template_overlay_parsed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_PARSED_ADHOC}.make).to_pixmap end, "archetype/template_overlay_parsed_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_PARSE_FAILED}.make).to_pixmap end, "archetype/template_overlay_parse_failed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_PARSE_FAILED_ADHOC}.make).to_pixmap end, "archetype/template_overlay_parse_failed_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_VALID}.make).to_pixmap end, "archetype/template_overlay_valid")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_VALID_ADHOC}.make).to_pixmap end, "archetype/template_overlay_valid_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_WARNING}.make).to_pixmap end, "archetype/template_overlay_warning")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_OVERLAY_WARNING_ADHOC}.make).to_pixmap end, "archetype/template_overlay_warning_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_PARSED}.make).to_pixmap end, "archetype/template_parsed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_PARSED_ADHOC}.make).to_pixmap end, "archetype/template_parsed_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_PARSE_FAILED}.make).to_pixmap end, "archetype/template_parse_failed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_PARSE_FAILED_ADHOC}.make).to_pixmap end, "archetype/template_parse_failed_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_VALID}.make).to_pixmap end, "archetype/template_valid")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_VALID_ADHOC}.make).to_pixmap end, "archetype/template_valid_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_WARNING}.make).to_pixmap end, "archetype/template_warning")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TEMPLATE_WARNING_ADHOC}.make).to_pixmap end, "archetype/template_warning_adhoc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ARCHETYPE_TERM_REL_PART_OF}.make).to_pixmap end, "archetype/term_rel_part_of")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ELEMENTS_ARCHETYPE_GREEN_DISC}.make).to_pixmap end, "elements/archetype_green_disc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ELEMENTS_ARCHETYPE_GREY_DISC}.make).to_pixmap end, "elements/archetype_grey_disc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_ELEMENTS_TEMPLATE_DISC}.make).to_pixmap end, "elements/template_disc")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_OPENEHR}.make).to_pixmap end, "openehr")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_OPENEHR_ADL_WORKBENCH_LOGO}.make).to_pixmap end, "openehr_adl_workbench_logo")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_OPENEHR_AWB_SMALL_LOGO}.make).to_pixmap end, "openehr_awb_small_logo")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_BL}.make).to_pixmap end, "rm/cdisc/bl")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_CD}.make).to_pixmap end, "rm/cdisc/cd")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_CS}.make).to_pixmap end, "rm/cdisc/cs")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_CV}.make).to_pixmap end, "rm/cdisc/cv")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_DATE}.make).to_pixmap end, "rm/cdisc/date")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_DATETIME}.make).to_pixmap end, "rm/cdisc/datetime")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_DEFINEDOBSERVATION}.make).to_pixmap end, "rm/cdisc/definedobservation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_ED}.make).to_pixmap end, "rm/cdisc/ed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_INT}.make).to_pixmap end, "rm/cdisc/int")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_IVL}.make).to_pixmap end, "rm/cdisc/ivl")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_PERFORMEDCOMPOSITIONRELATIONSHIP}.make).to_pixmap end, "rm/cdisc/performedcompositionrelationship")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_PERFORMEDOBSERVATION}.make).to_pixmap end, "rm/cdisc/performedobservation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_PERFORMEDOBSERVATIONRESULT}.make).to_pixmap end, "rm/cdisc/performedobservationresult")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_PLANNEDACTIVITY}.make).to_pixmap end, "rm/cdisc/plannedactivity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_PQ}.make).to_pixmap end, "rm/cdisc/pq")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_ST}.make).to_pixmap end, "rm/cdisc/st")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_SUBJECT}.make).to_pixmap end, "rm/cdisc/subject")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_TIME}.make).to_pixmap end, "rm/cdisc/time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CDISC_TS}.make).to_pixmap end, "rm/cdisc/ts")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_BL}.make).to_pixmap end, "rm/cen/bl")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_CD}.make).to_pixmap end, "rm/cen/cd")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_CLUSTER}.make).to_pixmap end, "rm/cen/cluster")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_CLUSTER_SLOT}.make).to_pixmap end, "rm/cen/cluster_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_COMPOSITION}.make).to_pixmap end, "rm/cen/composition")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_COMPOSITION_SLOT}.make).to_pixmap end, "rm/cen/composition_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_CONTENT}.make).to_pixmap end, "rm/cen/content")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_CS}.make).to_pixmap end, "rm/cen/cs")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_CV}.make).to_pixmap end, "rm/cen/cv")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_ED}.make).to_pixmap end, "rm/cen/ed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_EHR_EXTRACT}.make).to_pixmap end, "rm/cen/ehr_extract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_ELEMENT}.make).to_pixmap end, "rm/cen/element")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_ENTRY}.make).to_pixmap end, "rm/cen/entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_ENTRY_SLOT}.make).to_pixmap end, "rm/cen/entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_FOLDER}.make).to_pixmap end, "rm/cen/folder")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_INT}.make).to_pixmap end, "rm/cen/int")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_ITEM}.make).to_pixmap end, "rm/cen/item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_IVL}.make).to_pixmap end, "rm/cen/ivl")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_LINK}.make).to_pixmap end, "rm/cen/link")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_ORGANISATION_SLOT}.make).to_pixmap end, "rm/cen/organisation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_PARTY_IDENTITY_SLOT}.make).to_pixmap end, "rm/cen/party_identity_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_PERSON_SLOT}.make).to_pixmap end, "rm/cen/person_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_PQ}.make).to_pixmap end, "rm/cen/pq")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_SECTION}.make).to_pixmap end, "rm/cen/section")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_SECTION_SLOT}.make).to_pixmap end, "rm/cen/section_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CEN_TEXT}.make).to_pixmap end, "rm/cen/text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_BOOLEAN}.make).to_pixmap end, "rm/cimi/boolean")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CLINICAL_DATA_GROUP}.make).to_pixmap end, "rm/cimi/clinical_data_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CLINICAL_DATA_GROUP_SLOT}.make).to_pixmap end, "rm/cimi/clinical_data_group_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CLUSTER}.make).to_pixmap end, "rm/cimi/cluster")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CLUSTER_REFERENCE}.make).to_pixmap end, "rm/cimi/cluster_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CLUSTER_SLOT}.make).to_pixmap end, "rm/cimi/cluster_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CODED_TEXT}.make).to_pixmap end, "rm/cimi/coded_text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_COMPOUND_ENTRY}.make).to_pixmap end, "rm/cimi/compound_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_COMPOUND_ENTRY_SLOT}.make).to_pixmap end, "rm/cimi/compound_entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_CONTENT_ITEM}.make).to_pixmap end, "rm/cimi/content_item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_COUNT}.make).to_pixmap end, "rm/cimi/count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_DATE}.make).to_pixmap end, "rm/cimi/date")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_DATE_TIME}.make).to_pixmap end, "rm/cimi/date_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_DURATION}.make).to_pixmap end, "rm/cimi/duration")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ELEMENT}.make).to_pixmap end, "rm/cimi/element")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ELEMENT_REFERENCE}.make).to_pixmap end, "rm/cimi/element_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ELEMENT_SLOT}.make).to_pixmap end, "rm/cimi/element_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ENTRY}.make).to_pixmap end, "rm/cimi/entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ENTRY_SLOT}.make).to_pixmap end, "rm/cimi/entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_FOLDER}.make).to_pixmap end, "rm/cimi/folder")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_IDENTIFIER}.make).to_pixmap end, "rm/cimi/identifier")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_INDIVISIBLE_ENTRY}.make).to_pixmap end, "rm/cimi/indivisible_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_INDIVISIBLE_ENTRY_SLOT}.make).to_pixmap end, "rm/cimi/indivisible_entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_INTERVAL_VALUE}.make).to_pixmap end, "rm/cimi/interval_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_INTERVAL_VALUE_COUNT}.make).to_pixmap end, "rm/cimi/interval_value_count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_INTERVAL_VALUE_DATE_TIME}.make).to_pixmap end, "rm/cimi/interval_value_date_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_INTERVAL_VALUE_DURATION}.make).to_pixmap end, "rm/cimi/interval_value_duration")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ITEM}.make).to_pixmap end, "rm/cimi/item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ITEM_GROUP}.make).to_pixmap end, "rm/cimi/item_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ITEM_GROUP_REFERENCE}.make).to_pixmap end, "rm/cimi/item_group_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ITEM_GROUP_SLOT}.make).to_pixmap end, "rm/cimi/item_group_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_LINK}.make).to_pixmap end, "rm/cimi/link")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ORDINAL}.make).to_pixmap end, "rm/cimi/ordinal")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_ORGANISATION_SLOT}.make).to_pixmap end, "rm/cimi/organisation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PARSABLE}.make).to_pixmap end, "rm/cimi/parsable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PARTICIPATION}.make).to_pixmap end, "rm/cimi/participation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PARTY_IDENTITY_SLOT}.make).to_pixmap end, "rm/cimi/party_identity_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PARTY_RELATIONSHIP}.make).to_pixmap end, "rm/cimi/party_relationship")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PERSON_SLOT}.make).to_pixmap end, "rm/cimi/person_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PLAIN_TEXT}.make).to_pixmap end, "rm/cimi/plain_text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_PROPORTION}.make).to_pixmap end, "rm/cimi/proportion")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_QUANTITY}.make).to_pixmap end, "rm/cimi/quantity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_SECTION}.make).to_pixmap end, "rm/cimi/section")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_SECTION_SLOT}.make).to_pixmap end, "rm/cimi/section_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_TEXT}.make).to_pixmap end, "rm/cimi/text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_TIME}.make).to_pixmap end, "rm/cimi/time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_CIMI_URI}.make).to_pixmap end, "rm/cimi/uri")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_CONTAINER_ENTITY_ABSTRACT_PRIMITIVE}.make).to_pixmap end, "rm/generic/container_entity-abstract-primitive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_CONTAINER_ENTITY_ABSTRACT}.make).to_pixmap end, "rm/generic/container_entity-abstract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_CONTAINER_ENTITY_PRIMITIVE}.make).to_pixmap end, "rm/generic/container_entity-primitive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_CONTAINER_ENTITY}.make).to_pixmap end, "rm/generic/container_entity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_C_META_ATTRIBUTE}.make).to_pixmap end, "rm/generic/c_meta_attribute")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_ENUMERATION_ENTITY}.make).to_pixmap end, "rm/generic/enumeration_entity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_EFFECTIVE_ENTITY}.make).to_pixmap end, "rm/generic/generic_effective_entity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_ENTITY_ABSTRACT_PRIMITIVE}.make).to_pixmap end, "rm/generic/generic_entity-abstract-primitive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_ENTITY_ABSTRACT}.make).to_pixmap end, "rm/generic/generic_entity-abstract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_ENTITY_PRIMITIVE}.make).to_pixmap end, "rm/generic/generic_entity-primitive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_ENTITY}.make).to_pixmap end, "rm/generic/generic_entity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_PARAMETER_ENTITY_CONSTRAINED}.make).to_pixmap end, "rm/generic/generic_parameter_entity-constrained")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_GENERIC_PARAMETER_ENTITY}.make).to_pixmap end, "rm/generic/generic_parameter_entity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PACKAGE}.make).to_pixmap end, "rm/generic/package")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_MULTIPLE_MANDATORY}.make).to_pixmap end, "rm/generic/property.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_MULTIPLE_OPTIONAL}.make).to_pixmap end, "rm/generic/property.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_SINGLE_MANDATORY}.make).to_pixmap end, "rm/generic/property.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_SINGLE_OPTIONAL}.make).to_pixmap end, "rm/generic/property.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_COMPUTED_MULTIPLE_MANDATORY}.make).to_pixmap end, "rm/generic/property_computed.multiple_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_COMPUTED_MULTIPLE_OPTIONAL}.make).to_pixmap end, "rm/generic/property_computed.multiple_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_COMPUTED_SINGLE_MANDATORY}.make).to_pixmap end, "rm/generic/property_computed.single_mandatory")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_PROPERTY_COMPUTED_SINGLE_OPTIONAL}.make).to_pixmap end, "rm/generic/property_computed.single_optional")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_ABSTRACT_OVERRIDE}.make).to_pixmap end, "rm/generic/simple_entity-abstract-override")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_ABSTRACT_PRIMITIVE}.make).to_pixmap end, "rm/generic/simple_entity-abstract-primitive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_ABSTRACT}.make).to_pixmap end, "rm/generic/simple_entity-abstract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_OVERRIDE}.make).to_pixmap end, "rm/generic/simple_entity-override")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_PRIMITIVE}.make).to_pixmap end, "rm/generic/simple_entity-primitive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_SUPERTYPE_OVERRIDE}.make).to_pixmap end, "rm/generic/simple_entity-supertype-override")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY_SUPERTYPE}.make).to_pixmap end, "rm/generic/simple_entity-supertype")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_GENERIC_SIMPLE_ENTITY}.make).to_pixmap end, "rm/generic/simple_entity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_ADDRESS}.make).to_pixmap end, "rm/hl7-fhir/address")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_ATTACHMENT}.make).to_pixmap end, "rm/hl7-fhir/attachment")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_BOOLEAN}.make).to_pixmap end, "rm/hl7-fhir/boolean")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_CODE}.make).to_pixmap end, "rm/hl7-fhir/code")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_CODEABLECONCEPT}.make).to_pixmap end, "rm/hl7-fhir/codeableconcept")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_CONTACT}.make).to_pixmap end, "rm/hl7-fhir/contact")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_COUNT}.make).to_pixmap end, "rm/hl7-fhir/count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_DATE}.make).to_pixmap end, "rm/hl7-fhir/date")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_DATE_TIME}.make).to_pixmap end, "rm/hl7-fhir/date_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_GROUP}.make).to_pixmap end, "rm/hl7-fhir/group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_IDENTIFIER}.make).to_pixmap end, "rm/hl7-fhir/identifier")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_INSTANT}.make).to_pixmap end, "rm/hl7-fhir/instant")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_INTEGER}.make).to_pixmap end, "rm/hl7-fhir/integer")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_OBSERVATION}.make).to_pixmap end, "rm/hl7-fhir/observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_OBSERVATION_SLOT}.make).to_pixmap end, "rm/hl7-fhir/observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_ORDER}.make).to_pixmap end, "rm/hl7-fhir/order")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_ORDER_SLOT}.make).to_pixmap end, "rm/hl7-fhir/order_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_ORGANISATION}.make).to_pixmap end, "rm/hl7-fhir/organisation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_ORGANISATION_SLOT}.make).to_pixmap end, "rm/hl7-fhir/organisation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_PATIENT}.make).to_pixmap end, "rm/hl7-fhir/patient")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_PERIOD}.make).to_pixmap end, "rm/hl7-fhir/period")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_QUANTITY}.make).to_pixmap end, "rm/hl7-fhir/quantity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RANGE}.make).to_pixmap end, "rm/hl7-fhir/range")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RATIO}.make).to_pixmap end, "rm/hl7-fhir/ratio")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RELATED}.make).to_pixmap end, "rm/hl7-fhir/related")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RELATED_PERSON}.make).to_pixmap end, "rm/hl7-fhir/related_person")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RESOURCE}.make).to_pixmap end, "rm/hl7-fhir/resource")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RESOURCEREFERENCE}.make).to_pixmap end, "rm/hl7-fhir/resourcereference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_RESOURCE_SLOT}.make).to_pixmap end, "rm/hl7-fhir/resource_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_SAMPLEDDATA}.make).to_pixmap end, "rm/hl7-fhir/sampleddata")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_TIME}.make).to_pixmap end, "rm/hl7-fhir/time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_HL7_FHIR_URI}.make).to_pixmap end, "rm/hl7-fhir/uri")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_BL}.make).to_pixmap end, "rm/iso/bl")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CD}.make).to_pixmap end, "rm/iso/cd")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CLUSTER}.make).to_pixmap end, "rm/iso/cluster")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CLUSTER_REFERENCE}.make).to_pixmap end, "rm/iso/cluster_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CLUSTER_SLOT}.make).to_pixmap end, "rm/iso/cluster_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_COMPOSITION}.make).to_pixmap end, "rm/iso/composition")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_COMPOSITION_SLOT}.make).to_pixmap end, "rm/iso/composition_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CONTENT_ITEM}.make).to_pixmap end, "rm/iso/content_item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CS}.make).to_pixmap end, "rm/iso/cs")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_CV}.make).to_pixmap end, "rm/iso/cv")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ED}.make).to_pixmap end, "rm/iso/ed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_EHR_EXTRACT}.make).to_pixmap end, "rm/iso/ehr_extract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ELEMENT}.make).to_pixmap end, "rm/iso/element")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ELEMENT_REFERENCE}.make).to_pixmap end, "rm/iso/element_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ENTRY}.make).to_pixmap end, "rm/iso/entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ENTRY_SLOT}.make).to_pixmap end, "rm/iso/entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_FOLDER}.make).to_pixmap end, "rm/iso/folder")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_INT}.make).to_pixmap end, "rm/iso/int")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ITEM}.make).to_pixmap end, "rm/iso/item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_IVL}.make).to_pixmap end, "rm/iso/ivl")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_LINK}.make).to_pixmap end, "rm/iso/link")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_PQ}.make).to_pixmap end, "rm/iso/pq")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_SECTION}.make).to_pixmap end, "rm/iso/section")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_ST}.make).to_pixmap end, "rm/iso/st")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_ISO_TS}.make).to_pixmap end, "rm/iso/ts")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ACTION}.make).to_pixmap end, "rm/openehr/action")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ACTION_REFERENCE}.make).to_pixmap end, "rm/openehr/action_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ACTION_SLOT}.make).to_pixmap end, "rm/openehr/action_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ACTIVITY}.make).to_pixmap end, "rm/openehr/activity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADDRESS}.make).to_pixmap end, "rm/openehr/address")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADDRESS_REFERENCE}.make).to_pixmap end, "rm/openehr/address_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADDRESS_SLOT}.make).to_pixmap end, "rm/openehr/address_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADHOC_BRANCH}.make).to_pixmap end, "rm/openehr/adhoc_branch")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADHOC_GROUP}.make).to_pixmap end, "rm/openehr/adhoc_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADMIN_ENTRY}.make).to_pixmap end, "rm/openehr/admin_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADMIN_ENTRY_REFERENCE}.make).to_pixmap end, "rm/openehr/admin_entry_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ADMIN_ENTRY_SLOT}.make).to_pixmap end, "rm/openehr/admin_entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_AGENT}.make).to_pixmap end, "rm/openehr/agent")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ANY}.make).to_pixmap end, "rm/openehr/any")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_API_CALL}.make).to_pixmap end, "rm/openehr/api_call")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CAPABILITY}.make).to_pixmap end, "rm/openehr/capability")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CARE_ENTRY}.make).to_pixmap end, "rm/openehr/care_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CARE_ENTRY32X32}.make).to_pixmap end, "rm/openehr/care_entry32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CLUSTER}.make).to_pixmap end, "rm/openehr/cluster")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CLUSTER_REFERENCE}.make).to_pixmap end, "rm/openehr/cluster_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CLUSTER_SLOT}.make).to_pixmap end, "rm/openehr/cluster_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_COMPOSITION}.make).to_pixmap end, "rm/openehr/composition")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_COMPOSITION_REFERENCE}.make).to_pixmap end, "rm/openehr/composition_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_COMPOSITION_SLOT}.make).to_pixmap end, "rm/openehr/composition_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CONDITION_BRANCH}.make).to_pixmap end, "rm/openehr/condition_branch")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CONDITION_GROUP}.make).to_pixmap end, "rm/openehr/condition_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CONTACT}.make).to_pixmap end, "rm/openehr/contact")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CONTENT_ITEM}.make).to_pixmap end, "rm/openehr/content_item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_CONTENT_ITEM32X32}.make).to_pixmap end, "rm/openehr/content_item32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DECISION_BRANCH}.make).to_pixmap end, "rm/openehr/decision_branch")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DECISION_GROUP}.make).to_pixmap end, "rm/openehr/decision_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DEFINED_ACTION}.make).to_pixmap end, "rm/openehr/defined_action")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DISPATCHABLE_TASK}.make).to_pixmap end, "rm/openehr/dispatchable_task")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_BOOLEAN}.make).to_pixmap end, "rm/openehr/dv_boolean")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_CODED_TEXT}.make).to_pixmap end, "rm/openehr/dv_coded_text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_COUNT}.make).to_pixmap end, "rm/openehr/dv_count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_DATE}.make).to_pixmap end, "rm/openehr/dv_date")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_DATE_TIME}.make).to_pixmap end, "rm/openehr/dv_date_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_DURATION}.make).to_pixmap end, "rm/openehr/dv_duration")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_IDENTIFIER}.make).to_pixmap end, "rm/openehr/dv_identifier")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_INTERVAL}.make).to_pixmap end, "rm/openehr/dv_interval")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_MULTIMEDIA}.make).to_pixmap end, "rm/openehr/dv_multimedia")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_ORDINAL}.make).to_pixmap end, "rm/openehr/dv_ordinal")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_PARSABLE}.make).to_pixmap end, "rm/openehr/dv_parsable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_PROPORTION}.make).to_pixmap end, "rm/openehr/dv_proportion")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_QUANTITY}.make).to_pixmap end, "rm/openehr/dv_quantity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_TEXT}.make).to_pixmap end, "rm/openehr/dv_text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_TIME}.make).to_pixmap end, "rm/openehr/dv_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_DV_URI}.make).to_pixmap end, "rm/openehr/dv_uri")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ELEMENT}.make).to_pixmap end, "rm/openehr/element")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ELEMENT_REFERENCE}.make).to_pixmap end, "rm/openehr/element_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ELEMENT_SLOT}.make).to_pixmap end, "rm/openehr/element_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ENTRY}.make).to_pixmap end, "rm/openehr/entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ENTRY32X32}.make).to_pixmap end, "rm/openehr/entry32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ENTRY_REFERENCE}.make).to_pixmap end, "rm/openehr/entry_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ENTRY_SLOT}.make).to_pixmap end, "rm/openehr/entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVALUATION}.make).to_pixmap end, "rm/openehr/evaluation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVALUATION32X32}.make).to_pixmap end, "rm/openehr/evaluation32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVALUATION_REFERENCE}.make).to_pixmap end, "rm/openehr/evaluation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVALUATION_SLOT}.make).to_pixmap end, "rm/openehr/evaluation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVENT}.make).to_pixmap end, "rm/openehr/event")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVENT32X32}.make).to_pixmap end, "rm/openehr/event32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EVENT_VARIABLE}.make).to_pixmap end, "rm/openehr/event_variable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EXTERNAL_REQUEST}.make).to_pixmap end, "rm/openehr/external_request")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_EXTRACT}.make).to_pixmap end, "rm/openehr/extract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_FOLDER}.make).to_pixmap end, "rm/openehr/folder")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_GROUP}.make).to_pixmap end, "rm/openehr/group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_HAND_OFF}.make).to_pixmap end, "rm/openehr/hand_off")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_HISTORY}.make).to_pixmap end, "rm/openehr/history")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_HISTORY32X32}.make).to_pixmap end, "rm/openehr/history32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INSTRUCTION}.make).to_pixmap end, "rm/openehr/instruction")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INSTRUCTION_REFERENCE}.make).to_pixmap end, "rm/openehr/instruction_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INSTRUCTION_SLOT}.make).to_pixmap end, "rm/openehr/instruction_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INTERVAL_COUNT}.make).to_pixmap end, "rm/openehr/interval_count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INTERVAL_DATE_TIME}.make).to_pixmap end, "rm/openehr/interval_date_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INTERVAL_DURATION}.make).to_pixmap end, "rm/openehr/interval_duration")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INTERVAL_EVENT}.make).to_pixmap end, "rm/openehr/interval_event")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INTERVAL_EVENT32X32}.make).to_pixmap end, "rm/openehr/interval_event32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_INTERVAL_QUANTITY}.make).to_pixmap end, "rm/openehr/interval_quantity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ISM_TRANSITION}.make).to_pixmap end, "rm/openehr/ism_transition")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM}.make).to_pixmap end, "rm/openehr/item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM_LIST}.make).to_pixmap end, "rm/openehr/item_list")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM_LIST_REFERENCE}.make).to_pixmap end, "rm/openehr/item_list_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM_STRUCTURE}.make).to_pixmap end, "rm/openehr/item_structure")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM_TREE}.make).to_pixmap end, "rm/openehr/item_tree")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM_TREE_REFERENCE}.make).to_pixmap end, "rm/openehr/item_tree_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ITEM_TREE_SLOT}.make).to_pixmap end, "rm/openehr/item_tree_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_LINK}.make).to_pixmap end, "rm/openehr/link")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_OBJECT_REF}.make).to_pixmap end, "rm/openehr/object_ref")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_OBSERVATION}.make).to_pixmap end, "rm/openehr/observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_OBSERVATION_REFERENCE}.make).to_pixmap end, "rm/openehr/observation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_OBSERVATION_SLOT}.make).to_pixmap end, "rm/openehr/observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ORGANISATION}.make).to_pixmap end, "rm/openehr/organisation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ORGANISATION_REFERENCE}.make).to_pixmap end, "rm/openehr/organisation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ORGANISATION_SLOT}.make).to_pixmap end, "rm/openehr/organisation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTICIPATION}.make).to_pixmap end, "rm/openehr/participation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTY_IDENTITY}.make).to_pixmap end, "rm/openehr/party_identity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTY_IDENTITY_REFERENCE}.make).to_pixmap end, "rm/openehr/party_identity_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTY_IDENTITY_SLOT}.make).to_pixmap end, "rm/openehr/party_identity_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTY_PROXY}.make).to_pixmap end, "rm/openehr/party_proxy")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTY_REF}.make).to_pixmap end, "rm/openehr/party_ref")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PARTY_RELATIONSHIP}.make).to_pixmap end, "rm/openehr/party_relationship")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PERFORMABLE_TASK}.make).to_pixmap end, "rm/openehr/performable_task")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PERSON}.make).to_pixmap end, "rm/openehr/person")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PERSON_REFERENCE}.make).to_pixmap end, "rm/openehr/person_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PERSON_SLOT}.make).to_pixmap end, "rm/openehr/person_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_PLAN_DATA_CONTEXT}.make).to_pixmap end, "rm/openehr/plan_data_context")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_POINT_EVENT}.make).to_pixmap end, "rm/openehr/point_event")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_POINT_EVENT32X32}.make).to_pixmap end, "rm/openehr/point_event32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_QUERY_CALL}.make).to_pixmap end, "rm/openehr/query_call")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_ROLE}.make).to_pixmap end, "rm/openehr/role")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_SECTION}.make).to_pixmap end, "rm/openehr/section")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_SECTION_REFERENCE}.make).to_pixmap end, "rm/openehr/section_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_SECTION_SLOT}.make).to_pixmap end, "rm/openehr/section_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_STATE_VARIABLE}.make).to_pixmap end, "rm/openehr/state_variable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_STRUCTURE}.make).to_pixmap end, "rm/openehr/structure")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_SUB_PLAN}.make).to_pixmap end, "rm/openehr/sub_plan")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_SYSTEM_REQUEST}.make).to_pixmap end, "rm/openehr/system_request")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_TASK}.make).to_pixmap end, "rm/openehr/task")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_TASK_GROUP}.make).to_pixmap end, "rm/openehr/task_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_TASK_PLAN}.make).to_pixmap end, "rm/openehr/task_plan")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_TYPE_DEF_BOOLEAN}.make).to_pixmap end, "rm/openehr/type_def_boolean")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_TYPE_DEF_INTEGER}.make).to_pixmap end, "rm/openehr/type_def_integer")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_TYPE_DEF_STRING}.make).to_pixmap end, "rm/openehr/type_def_string")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_OPENEHR_WORK_PLAN}.make).to_pixmap end, "rm/openehr/work_plan")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ACTION}.make).to_pixmap end, "rm/s2/action")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ACTION_REFERENCE}.make).to_pixmap end, "rm/s2/action_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ACTION_SLOT}.make).to_pixmap end, "rm/s2/action_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ACTIVITY}.make).to_pixmap end, "rm/s2/activity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADDRESS}.make).to_pixmap end, "rm/s2/address")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADDRESS_REFERENCE}.make).to_pixmap end, "rm/s2/address_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADDRESS_SLOT}.make).to_pixmap end, "rm/s2/address_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADHOC_BRANCH}.make).to_pixmap end, "rm/s2/adhoc_branch")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADHOC_GROUP}.make).to_pixmap end, "rm/s2/adhoc_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADHOC_OBSERVATION}.make).to_pixmap end, "rm/s2/adhoc_observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADHOC_OBSERVATION_REFERENCE}.make).to_pixmap end, "rm/s2/adhoc_observation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADHOC_OBSERVATION_SLOT}.make).to_pixmap end, "rm/s2/adhoc_observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADMIN_ENTRY}.make).to_pixmap end, "rm/s2/admin_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADMIN_ENTRY_REFERENCE}.make).to_pixmap end, "rm/s2/admin_entry_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ADMIN_ENTRY_SLOT}.make).to_pixmap end, "rm/s2/admin_entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_AGENT}.make).to_pixmap end, "rm/s2/agent")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ANY}.make).to_pixmap end, "rm/s2/any")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_API_CALL}.make).to_pixmap end, "rm/s2/api_call")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ASSESSMENT}.make).to_pixmap end, "rm/s2/assessment")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ASSESSMENT32X32}.make).to_pixmap end, "rm/s2/assessment32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ASSESSMENT_REFERENCE}.make).to_pixmap end, "rm/s2/assessment_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ASSESSMENT_SLOT}.make).to_pixmap end, "rm/s2/assessment_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_BOOLEAN_VALUE}.make).to_pixmap end, "rm/s2/boolean_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CAPABILITY}.make).to_pixmap end, "rm/s2/capability")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CARE_ACT_ENTRY}.make).to_pixmap end, "rm/s2/care_act_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CARE_ACT_ENTRY32X32}.make).to_pixmap end, "rm/s2/care_act_entry32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CARE_ENTRY}.make).to_pixmap end, "rm/s2/care_entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CARE_ENTRY32X32}.make).to_pixmap end, "rm/s2/care_entry32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CODED_ORDINAL}.make).to_pixmap end, "rm/s2/coded_ordinal")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CODED_TEXT}.make).to_pixmap end, "rm/s2/coded_text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COMMS_ADDRESS_USE}.make).to_pixmap end, "rm/s2/comms_address_use")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COMMS_ADDRESS_USE_REFERENCE}.make).to_pixmap end, "rm/s2/comms_address_use_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COMMS_ADDRESS_USE_SLOT}.make).to_pixmap end, "rm/s2/comms_address_use_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COMPOSITION}.make).to_pixmap end, "rm/s2/composition")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COMPOSITION_REFERENCE}.make).to_pixmap end, "rm/s2/composition_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COMPOSITION_SLOT}.make).to_pixmap end, "rm/s2/composition_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CONDITION_BRANCH}.make).to_pixmap end, "rm/s2/condition_branch")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CONDITION_GROUP}.make).to_pixmap end, "rm/s2/condition_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CONTACT}.make).to_pixmap end, "rm/s2/contact")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CONTENT_ITEM}.make).to_pixmap end, "rm/s2/content_item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_CONTENT_ITEM32X32}.make).to_pixmap end, "rm/s2/content_item32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_COUNT}.make).to_pixmap end, "rm/s2/count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DATE_TIME_VALUE}.make).to_pixmap end, "rm/s2/date_time_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DATE_VALUE}.make).to_pixmap end, "rm/s2/date_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DECISION_BRANCH}.make).to_pixmap end, "rm/s2/decision_branch")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DECISION_GROUP}.make).to_pixmap end, "rm/s2/decision_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DEFINED_ACTION}.make).to_pixmap end, "rm/s2/defined_action")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DIRECT_OBSERVATION}.make).to_pixmap end, "rm/s2/direct_observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DIRECT_OBSERVATION_REFERENCE}.make).to_pixmap end, "rm/s2/direct_observation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DIRECT_OBSERVATION_SLOT}.make).to_pixmap end, "rm/s2/direct_observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DISPATCHABLE_TASK}.make).to_pixmap end, "rm/s2/dispatchable_task")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_DURATION_VALUE}.make).to_pixmap end, "rm/s2/duration_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTITY_REF_NODE}.make).to_pixmap end, "rm/s2/entity_ref_node")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTITY_REF_NODE_REFERENCE}.make).to_pixmap end, "rm/s2/entity_ref_node_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTITY_REF_NODE_SLOT}.make).to_pixmap end, "rm/s2/entity_ref_node_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTRY}.make).to_pixmap end, "rm/s2/entry")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTRY32X32}.make).to_pixmap end, "rm/s2/entry32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTRY_REFERENCE}.make).to_pixmap end, "rm/s2/entry_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ENTRY_SLOT}.make).to_pixmap end, "rm/s2/entry_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_EVENT}.make).to_pixmap end, "rm/s2/event")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_EVENT32X32}.make).to_pixmap end, "rm/s2/event32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_EVENT_VARIABLE}.make).to_pixmap end, "rm/s2/event_variable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_EXTERNAL_REQUEST}.make).to_pixmap end, "rm/s2/external_request")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_EXTRACT}.make).to_pixmap end, "rm/s2/extract")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_FOLDER}.make).to_pixmap end, "rm/s2/folder")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_GROUP}.make).to_pixmap end, "rm/s2/group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_HAND_OFF}.make).to_pixmap end, "rm/s2/hand_off")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_HISTORY}.make).to_pixmap end, "rm/s2/history")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_HISTORY32X32}.make).to_pixmap end, "rm/s2/history32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INDIRECT_OBSERVATION}.make).to_pixmap end, "rm/s2/indirect_observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INDIRECT_OBSERVATION_REFERENCE}.make).to_pixmap end, "rm/s2/indirect_observation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INDIRECT_OBSERVATION_SLOT}.make).to_pixmap end, "rm/s2/indirect_observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INFO_NODE}.make).to_pixmap end, "rm/s2/info_node")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INFO_NODE_REFERENCE}.make).to_pixmap end, "rm/s2/info_node_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INFO_NODE_SLOT}.make).to_pixmap end, "rm/s2/info_node_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INFO_REF_NODE}.make).to_pixmap end, "rm/s2/info_ref_node")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INFO_REF_NODE_REFERENCE}.make).to_pixmap end, "rm/s2/info_ref_node_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INFO_REF_NODE_SLOT}.make).to_pixmap end, "rm/s2/info_ref_node_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INTERVAL_COUNT}.make).to_pixmap end, "rm/s2/interval_count")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INTERVAL_DATE_TIME}.make).to_pixmap end, "rm/s2/interval_date_time")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INTERVAL_DURATION}.make).to_pixmap end, "rm/s2/interval_duration")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INTERVAL_EVENT}.make).to_pixmap end, "rm/s2/interval_event")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INTERVAL_EVENT32X32}.make).to_pixmap end, "rm/s2/interval_event32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_INTERVAL_QUANTITY}.make).to_pixmap end, "rm/s2/interval_quantity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ITEM}.make).to_pixmap end, "rm/s2/item")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_LINK}.make).to_pixmap end, "rm/s2/link")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_LOCATION_ADDRESS_USE}.make).to_pixmap end, "rm/s2/location_address_use")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_LOCATION_ADDRESS_USE_REFERENCE}.make).to_pixmap end, "rm/s2/location_address_use_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_LOCATION_ADDRESS_USE_SLOT}.make).to_pixmap end, "rm/s2/location_address_use_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_MULTIMEDIA}.make).to_pixmap end, "rm/s2/multimedia")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_NODE}.make).to_pixmap end, "rm/s2/node")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_NODE_REFERENCE}.make).to_pixmap end, "rm/s2/node_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_NODE_SLOT}.make).to_pixmap end, "rm/s2/node_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_OBJECT_REF}.make).to_pixmap end, "rm/s2/object_ref")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_OBSERVATION}.make).to_pixmap end, "rm/s2/observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_OBSERVATION_REFERENCE}.make).to_pixmap end, "rm/s2/observation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_OBSERVATION_SLOT}.make).to_pixmap end, "rm/s2/observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ORDER}.make).to_pixmap end, "rm/s2/order")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ORDER_REFERENCE}.make).to_pixmap end, "rm/s2/order_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ORDER_SLOT}.make).to_pixmap end, "rm/s2/order_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ORGANISATION}.make).to_pixmap end, "rm/s2/organisation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ORGANISATION_REFERENCE}.make).to_pixmap end, "rm/s2/organisation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ORGANISATION_SLOT}.make).to_pixmap end, "rm/s2/organisation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARSABLE}.make).to_pixmap end, "rm/s2/parsable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTICIPATION}.make).to_pixmap end, "rm/s2/participation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTY_IDENTITY}.make).to_pixmap end, "rm/s2/party_identity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTY_IDENTITY_REFERENCE}.make).to_pixmap end, "rm/s2/party_identity_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTY_IDENTITY_SLOT}.make).to_pixmap end, "rm/s2/party_identity_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTY_PROXY}.make).to_pixmap end, "rm/s2/party_proxy")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTY_REF}.make).to_pixmap end, "rm/s2/party_ref")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PARTY_RELATIONSHIP}.make).to_pixmap end, "rm/s2/party_relationship")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PERFORMABLE_TASK}.make).to_pixmap end, "rm/s2/performable_task")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PERSON}.make).to_pixmap end, "rm/s2/person")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PERSON_REFERENCE}.make).to_pixmap end, "rm/s2/person_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PERSON_SLOT}.make).to_pixmap end, "rm/s2/person_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PLAIN_TEXT}.make).to_pixmap end, "rm/s2/plain_text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_PLAN_DATA_CONTEXT}.make).to_pixmap end, "rm/s2/plan_data_context")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_POINT_EVENT}.make).to_pixmap end, "rm/s2/point_event")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_POINT_EVENT32X32}.make).to_pixmap end, "rm/s2/point_event32x32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_QUANTITY}.make).to_pixmap end, "rm/s2/quantity")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_QUERY_CALL}.make).to_pixmap end, "rm/s2/query_call")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_QUESTIONNAIRE_RESPONSE}.make).to_pixmap end, "rm/s2/questionnaire_response")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_QUESTIONNAIRE_RESPONSE_REFERENCE}.make).to_pixmap end, "rm/s2/questionnaire_response_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_QUESTIONNAIRE_RESPONSE_SLOT}.make).to_pixmap end, "rm/s2/questionnaire_response_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_RANGE}.make).to_pixmap end, "rm/s2/range")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_RATIO}.make).to_pixmap end, "rm/s2/ratio")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_ROLE}.make).to_pixmap end, "rm/s2/role")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_RWE_ID_REF}.make).to_pixmap end, "rm/s2/rwe_id_ref")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SCORE}.make).to_pixmap end, "rm/s2/score")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SCORE_REFERENCE}.make).to_pixmap end, "rm/s2/score_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SCORE_SLOT}.make).to_pixmap end, "rm/s2/score_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SECTION}.make).to_pixmap end, "rm/s2/section")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SECTION_REFERENCE}.make).to_pixmap end, "rm/s2/section_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SECTION_SLOT}.make).to_pixmap end, "rm/s2/section_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_STATE_TRANSITION}.make).to_pixmap end, "rm/s2/state_transition")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_STATE_VARIABLE}.make).to_pixmap end, "rm/s2/state_variable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_STRUCTURE}.make).to_pixmap end, "rm/s2/structure")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SUB_PLAN}.make).to_pixmap end, "rm/s2/sub_plan")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_SYSTEM_REQUEST}.make).to_pixmap end, "rm/s2/system_request")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TASK}.make).to_pixmap end, "rm/s2/task")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TASK_GROUP}.make).to_pixmap end, "rm/s2/task_group")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TASK_PLAN}.make).to_pixmap end, "rm/s2/task_plan")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TERMINOLOGY_TERM}.make).to_pixmap end, "rm/s2/terminology_term")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TEXT}.make).to_pixmap end, "rm/s2/text")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TIME_SERIES_OBSERVATION}.make).to_pixmap end, "rm/s2/time_series_observation")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TIME_SERIES_OBSERVATION_REFERENCE}.make).to_pixmap end, "rm/s2/time_series_observation_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TIME_SERIES_OBSERVATION_SLOT}.make).to_pixmap end, "rm/s2/time_series_observation_slot")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TIME_VALUE}.make).to_pixmap end, "rm/s2/time_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TYPE_DEF_BOOLEAN}.make).to_pixmap end, "rm/s2/type_def_boolean")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TYPE_DEF_INTEGER}.make).to_pixmap end, "rm/s2/type_def_integer")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_TYPE_DEF_STRING}.make).to_pixmap end, "rm/s2/type_def_string")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_URI_VALUE}.make).to_pixmap end, "rm/s2/uri_value")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_RM_S2_WORK_PLAN}.make).to_pixmap end, "rm/s2/work_plan")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ANCESTORS}.make).to_pixmap end, "tool/ancestors")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ANNOTATIONS}.make).to_pixmap end, "tool/annotations")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_CATALOG}.make).to_pixmap end, "tool/archetype_catalog")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_EDITOR}.make).to_pixmap end, "tool/archetype_editor")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_LIBRARY}.make).to_pixmap end, "tool/archetype_library")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_LIBRARY_REMOTE}.make).to_pixmap end, "tool/archetype_library_remote")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_REFERENCE}.make).to_pixmap end, "tool/archetype_reference")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_TOOL}.make).to_pixmap end, "tool/archetype_tool")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ARCHETYPE_TOOL_NEW}.make).to_pixmap end, "tool/archetype_tool_new")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_CLASS_TOOL}.make).to_pixmap end, "tool/class_tool")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_CLASS_TOOL_NEW}.make).to_pixmap end, "tool/class_tool_new")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_CLOSURE}.make).to_pixmap end, "tool/closure")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_COMPILE}.make).to_pixmap end, "tool/compile")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_CONSOLE}.make).to_pixmap end, "tool/console")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_DESCENDANTS}.make).to_pixmap end, "tool/descendants")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_DESCRIPTION}.make).to_pixmap end, "tool/description")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_DIFF}.make).to_pixmap end, "tool/diff")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_DIFF32}.make).to_pixmap end, "tool/diff32")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_DIFF_CLASS}.make).to_pixmap end, "tool/diff_class")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_EDIT}.make).to_pixmap end, "tool/edit")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_EDIT_ACTIVE}.make).to_pixmap end, "tool/edit_active")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_EDIT_INACTIVE}.make).to_pixmap end, "tool/edit_inactive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ERRORS}.make).to_pixmap end, "tool/errors")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ERRORS_GREY}.make).to_pixmap end, "tool/errors_grey")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_FILE_SYSTEM}.make).to_pixmap end, "tool/file_system")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_FLAT}.make).to_pixmap end, "tool/flat")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_FLAT_CLASS}.make).to_pixmap end, "tool/flat_class")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_GIT}.make).to_pixmap end, "tool/git")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_GITHUB}.make).to_pixmap end, "tool/github")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_GLOBE}.make).to_pixmap end, "tool/globe")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_GO}.make).to_pixmap end, "tool/go")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_HISTORY_BACK}.make).to_pixmap end, "tool/history_back")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_HISTORY_FORWARD}.make).to_pixmap end, "tool/history_forward")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_ICON_HELP_EXAMPLE}.make).to_pixmap end, "tool/icon_help_example")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_INFO}.make).to_pixmap end, "tool/info")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_JSON}.make).to_pixmap end, "tool/json")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_MAGNIFIER}.make).to_pixmap end, "tool/magnifier")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_METRICS}.make).to_pixmap end, "tool/metrics")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_METRICS_GREY}.make).to_pixmap end, "tool/metrics_grey")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_NEW_ARCHETYPE}.make).to_pixmap end, "tool/new_archetype")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_NODE_MAP}.make).to_pixmap end, "tool/node_map")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_OPEN_ARCHETYPE}.make).to_pixmap end, "tool/open_archetype")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_PARSE}.make).to_pixmap end, "tool/parse")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_PARSE_ERRORS}.make).to_pixmap end, "tool/parse_errors")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_PATHS}.make).to_pixmap end, "tool/paths")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_PATH_MAP}.make).to_pixmap end, "tool/path_map")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_PAUSE}.make).to_pixmap end, "tool/pause")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_PROPERTIES}.make).to_pixmap end, "tool/properties")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_REDO_ACTIVE}.make).to_pixmap end, "tool/redo_active")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_REDO_INACTIVE}.make).to_pixmap end, "tool/redo_inactive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_REFRESH}.make).to_pixmap end, "tool/refresh")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_REMOVE}.make).to_pixmap end, "tool/remove")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_RM_SCHEMA}.make).to_pixmap end, "tool/rm_schema")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_RM_SCHEMA_TOOL}.make).to_pixmap end, "tool/rm_schema_tool")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_RM_SCHEMA_TOOL_NEW}.make).to_pixmap end, "tool/rm_schema_tool_new")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SERIALISED}.make).to_pixmap end, "tool/serialised")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SLOT_MAP}.make).to_pixmap end, "tool/slot_map")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SOURCE}.make).to_pixmap end, "tool/source")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_STAR}.make).to_pixmap end, "tool/star")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_STATISTICS}.make).to_pixmap end, "tool/statistics")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_STATISTICS_GREY}.make).to_pixmap end, "tool/statistics_grey")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_STOP}.make).to_pixmap end, "tool/stop")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SUBVERSION}.make).to_pixmap end, "tool/subversion")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SVN}.make).to_pixmap end, "tool/svn")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SYNCHRONISE_ACTIVE}.make).to_pixmap end, "tool/synchronise_active")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_SYNCHRONISE_INACTIVE}.make).to_pixmap end, "tool/synchronise_inactive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TEMPLATE_CATALOG}.make).to_pixmap end, "tool/template_catalog")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TEMPLATE_CATALOG_GREY}.make).to_pixmap end, "tool/template_catalog_grey")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TEMPLATE_CATEGORY}.make).to_pixmap end, "tool/template_category")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TERMINOLOGY}.make).to_pixmap end, "tool/terminology")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TEST_FAILED}.make).to_pixmap end, "tool/test_failed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TEST_NOT_APPLICABLE}.make).to_pixmap end, "tool/test_not_applicable")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TEST_PASSED}.make).to_pixmap end, "tool/test_passed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TOOLS}.make).to_pixmap end, "tool/tools")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_COLLAPSE}.make).to_pixmap end, "tool/tree_collapse")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_COLLAPSE_ALL}.make).to_pixmap end, "tool/tree_collapse_all")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_DO_COLLAPSE}.make).to_pixmap end, "tool/tree_do_collapse")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_DO_COLLAPSE_ALL}.make).to_pixmap end, "tool/tree_do_collapse_all")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_DO_EXPAND}.make).to_pixmap end, "tool/tree_do_expand")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_DO_EXPAND_ALL}.make).to_pixmap end, "tool/tree_do_expand_all")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_EXPAND}.make).to_pixmap end, "tool/tree_expand")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_TREE_EXPAND_ALL}.make).to_pixmap end, "tool/tree_expand_all")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_UNDO_ACTIVE}.make).to_pixmap end, "tool/undo_active")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_UNDO_INACTIVE}.make).to_pixmap end, "tool/undo_inactive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_UNKNOWN}.make).to_pixmap end, "tool/unknown")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VALIDITY_ERRORS}.make).to_pixmap end, "tool/validity_errors")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VCS_DIVERGED}.make).to_pixmap end, "tool/vcs_diverged")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VCS_FILES_NOT_COMMITTED}.make).to_pixmap end, "tool/vcs_files_not_committed")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VCS_PULL_REQUIRED}.make).to_pixmap end, "tool/vcs_pull_required")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VCS_PUSH_REQUIRED}.make).to_pixmap end, "tool/vcs_push_required")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VCS_SYNC_REQUIRED}.make).to_pixmap end, "tool/vcs_sync_required")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VCS_UP_TO_DATE}.make).to_pixmap end, "tool/vcs_up_to_date")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VIEW_ALL_CLASSES_ACTIVE}.make).to_pixmap end, "tool/view_all_classes_active")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VIEW_ALL_CLASSES_INACTIVE}.make).to_pixmap end, "tool/view_all_classes_inactive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VIEW_ROTATE_ACTIVE}.make).to_pixmap end, "tool/view_rotate_active")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_VIEW_ROTATE_INACTIVE}.make).to_pixmap end, "tool/view_rotate_inactive")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_WARNINGS}.make).to_pixmap end, "tool/warnings")
			Result.put (agent :EV_PIXMAP do Result := (create {ICON_TOOL_XML}.make).to_pixmap end, "tool/xml")
		end
end